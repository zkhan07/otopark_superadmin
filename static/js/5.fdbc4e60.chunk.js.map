{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/unique.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/isSameError.ts","../../src/logic/shouldRenderBasedOnError.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/isPrimitive.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/deepEqual.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","entries","reduce","previous","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","mutationWatcher","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","disconnect","search","output","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","error","types","message","every","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","RegExp","validationData","isRegex","getValidateError","validateAllFieldCriteria","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","criteriaMode","React.useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","dirtyFieldsRef","watchFieldsRef","Set","watchFieldsHookRef","watchFieldsHookRenderRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","React.useState","render","modeRef","modeChecker","isValidateAllFieldCriteria","readFormStateRef","isDirty","dirtyFields","submitCount","touched","isSubmitting","reRender","React.useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","getValues","getFieldArrayParentName","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","isFieldWatched","renderWatchedInputs","found","size","setValue","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","removeFieldEventListenerAndRef","clearErrors","inputName","setError","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","formState","commonProps","prop","control","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/5.fdbc4e60.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  SubmitErrorHandler,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n            isTouched: !!get(touchedFieldsRef.current, name),\n            ...modeRef.current,\n          });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}